generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id        Int          @id @default(sequence())
  name      String       @unique
  ign       String?      @unique
  lolId     String?      @unique
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())
  gameStats PlayerStat[]
  stats     Stat[]
}

model Game {
  id            Int          @id @default(sequence())
  matchId       String       @unique
  gameMode      String?
  isMatchLoaded Boolean      @default(false)
  periodId      Int?
  duration      Float?
  gameCreation  DateTime?
  updatedAt     DateTime     @updatedAt
  createdAt     DateTime     @default(now())
  period        Period?      @relation(fields: [periodId], references: [id])
  players       PlayerStat[]
}

model PlayerStat {
  id                   Int         @id @default(sequence())
  gameId               Int
  championId           Int
  userId               Int?
  sumName              String
  puuid                String
  isAllyTeam           Boolean
  kills                Int
  deaths               Int
  assists              Int
  damage               Int
  tanked               Int
  mitigated            Int
  totalTimeCCDealt     Int
  isFirstBloodKill     Boolean
  doubleKills          Int
  tripleKills          Int
  quadraKills          Int
  pentaKills           Int
  timeCCingOthers      Int
  goldEarned           Int
  totalMinionsKilled   Int
  neutralMinionsKilled Int
  isWin                Boolean
  totalTimeSpentDead   Int
  updatedAt            DateTime    @updatedAt
  createdAt            DateTime    @default(now())
  totalCs              Int
  champion             Champion    @relation(fields: [championId], references: [id])
  game                 Game        @relation(fields: [gameId], references: [id])
  user                 User?       @relation(fields: [userId], references: [id])
  stat                 Stat?
  items                Item[]      @relation("ItemToPlayerStat")
  sumSpells            SumSpells[] @relation("PlayerStatToSumSpells")
}

model SumSpells {
  id        Int          @id @default(sequence())
  sumId     Int          @unique
  name      String?      @unique
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())
  players   PlayerStat[] @relation("PlayerStatToSumSpells")
}

model Item {
  id        Int          @id @default(sequence())
  itemId    Int          @unique
  name      String?      @unique
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())
  players   PlayerStat[] @relation("ItemToPlayerStat")
}

model Stat {
  id             Int          @id @default(sequence())
  userId         Int
  championStatId Int
  periodId       Int
  playerStatId   Int          @unique
  kills          Int
  deaths         Int
  assists        Int
  damage         Int
  reduction      Int
  kda            Int
  perf           Int
  xClass         Int
  comment        String?
  updatedAt      DateTime     @updatedAt
  createdAt      DateTime     @default(now())
  champion       ChampionStat @relation(fields: [championStatId], references: [id])
  period         Period       @relation(fields: [periodId], references: [id])
  playerStat     PlayerStat   @relation(fields: [playerStatId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model Champion {
  id        Int            @id @default(sequence())
  name      String         @unique
  support   Boolean        @default(false)
  updatedAt DateTime       @updatedAt
  createdAt DateTime       @default(now())
  stats     ChampionStat[]
  players   PlayerStat[]
}

model ChampionStat {
  id         Int      @id @default(sequence())
  periodId   Int
  winrate    Float
  championId Int
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  champion   Champion @relation(fields: [championId], references: [id])
  period     Period   @relation(fields: [periodId], references: [id])
  userStats  Stat[]

  @@unique([championId, periodId])
}

model Period {
  id            Int            @id @default(sequence())
  name          String
  date          DateTime
  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  championStats ChampionStat[]
  games         Game[]
  stats         Stat[]
}

model LolRequest {
  id        Int      @id @default(sequence())
  count     Int
  createdAt DateTime @default(now())
}
